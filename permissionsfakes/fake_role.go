// Code generated by counterfeiter. DO NOT EDIT.
package permissionsfakes

import (
	"sync"

	"github.com/rleszilm/permissions"
)

type FakeRole struct {
	PermissionsStub        func() permissions.Permission
	permissionsMutex       sync.RWMutex
	permissionsArgsForCall []struct {
	}
	permissionsReturns struct {
		result1 permissions.Permission
	}
	permissionsReturnsOnCall map[int]struct {
		result1 permissions.Permission
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRole) Permissions() permissions.Permission {
	fake.permissionsMutex.Lock()
	ret, specificReturn := fake.permissionsReturnsOnCall[len(fake.permissionsArgsForCall)]
	fake.permissionsArgsForCall = append(fake.permissionsArgsForCall, struct {
	}{})
	fake.recordInvocation("Permissions", []interface{}{})
	fake.permissionsMutex.Unlock()
	if fake.PermissionsStub != nil {
		return fake.PermissionsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.permissionsReturns
	return fakeReturns.result1
}

func (fake *FakeRole) PermissionsCallCount() int {
	fake.permissionsMutex.RLock()
	defer fake.permissionsMutex.RUnlock()
	return len(fake.permissionsArgsForCall)
}

func (fake *FakeRole) PermissionsCalls(stub func() permissions.Permission) {
	fake.permissionsMutex.Lock()
	defer fake.permissionsMutex.Unlock()
	fake.PermissionsStub = stub
}

func (fake *FakeRole) PermissionsReturns(result1 permissions.Permission) {
	fake.permissionsMutex.Lock()
	defer fake.permissionsMutex.Unlock()
	fake.PermissionsStub = nil
	fake.permissionsReturns = struct {
		result1 permissions.Permission
	}{result1}
}

func (fake *FakeRole) PermissionsReturnsOnCall(i int, result1 permissions.Permission) {
	fake.permissionsMutex.Lock()
	defer fake.permissionsMutex.Unlock()
	fake.PermissionsStub = nil
	if fake.permissionsReturnsOnCall == nil {
		fake.permissionsReturnsOnCall = make(map[int]struct {
			result1 permissions.Permission
		})
	}
	fake.permissionsReturnsOnCall[i] = struct {
		result1 permissions.Permission
	}{result1}
}

func (fake *FakeRole) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.permissionsMutex.RLock()
	defer fake.permissionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRole) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ permissions.Role = new(FakeRole)
