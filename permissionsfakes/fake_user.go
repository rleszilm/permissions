// Code generated by counterfeiter. DO NOT EDIT.
package permissionsfakes

import (
	"sync"

	"github.com/rleszilm/permissions"
)

type FakeUser struct {
	PermissionIDStub        func() permissions.UserID
	permissionIDMutex       sync.RWMutex
	permissionIDArgsForCall []struct {
	}
	permissionIDReturns struct {
		result1 permissions.UserID
	}
	permissionIDReturnsOnCall map[int]struct {
		result1 permissions.UserID
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUser) PermissionID() permissions.UserID {
	fake.permissionIDMutex.Lock()
	ret, specificReturn := fake.permissionIDReturnsOnCall[len(fake.permissionIDArgsForCall)]
	fake.permissionIDArgsForCall = append(fake.permissionIDArgsForCall, struct {
	}{})
	fake.recordInvocation("PermissionID", []interface{}{})
	fake.permissionIDMutex.Unlock()
	if fake.PermissionIDStub != nil {
		return fake.PermissionIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.permissionIDReturns
	return fakeReturns.result1
}

func (fake *FakeUser) PermissionIDCallCount() int {
	fake.permissionIDMutex.RLock()
	defer fake.permissionIDMutex.RUnlock()
	return len(fake.permissionIDArgsForCall)
}

func (fake *FakeUser) PermissionIDCalls(stub func() permissions.UserID) {
	fake.permissionIDMutex.Lock()
	defer fake.permissionIDMutex.Unlock()
	fake.PermissionIDStub = stub
}

func (fake *FakeUser) PermissionIDReturns(result1 permissions.UserID) {
	fake.permissionIDMutex.Lock()
	defer fake.permissionIDMutex.Unlock()
	fake.PermissionIDStub = nil
	fake.permissionIDReturns = struct {
		result1 permissions.UserID
	}{result1}
}

func (fake *FakeUser) PermissionIDReturnsOnCall(i int, result1 permissions.UserID) {
	fake.permissionIDMutex.Lock()
	defer fake.permissionIDMutex.Unlock()
	fake.PermissionIDStub = nil
	if fake.permissionIDReturnsOnCall == nil {
		fake.permissionIDReturnsOnCall = make(map[int]struct {
			result1 permissions.UserID
		})
	}
	fake.permissionIDReturnsOnCall[i] = struct {
		result1 permissions.UserID
	}{result1}
}

func (fake *FakeUser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.permissionIDMutex.RLock()
	defer fake.permissionIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ permissions.User = new(FakeUser)
