// Code generated by counterfeiter. DO NOT EDIT.
package permissionsfakes

import (
	"sync"

	"github.com/rleszilm/permissions"
)

type FakeResource struct {
	OwningGroupIDStub        func() permissions.GroupID
	owningGroupIDMutex       sync.RWMutex
	owningGroupIDArgsForCall []struct {
	}
	owningGroupIDReturns struct {
		result1 permissions.GroupID
	}
	owningGroupIDReturnsOnCall map[int]struct {
		result1 permissions.GroupID
	}
	OwningUserIDStub        func() permissions.UserID
	owningUserIDMutex       sync.RWMutex
	owningUserIDArgsForCall []struct {
	}
	owningUserIDReturns struct {
		result1 permissions.UserID
	}
	owningUserIDReturnsOnCall map[int]struct {
		result1 permissions.UserID
	}
	PermissionsStub        func() *permissions.Permissions
	permissionsMutex       sync.RWMutex
	permissionsArgsForCall []struct {
	}
	permissionsReturns struct {
		result1 *permissions.Permissions
	}
	permissionsReturnsOnCall map[int]struct {
		result1 *permissions.Permissions
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResource) OwningGroupID() permissions.GroupID {
	fake.owningGroupIDMutex.Lock()
	ret, specificReturn := fake.owningGroupIDReturnsOnCall[len(fake.owningGroupIDArgsForCall)]
	fake.owningGroupIDArgsForCall = append(fake.owningGroupIDArgsForCall, struct {
	}{})
	fake.recordInvocation("OwningGroupID", []interface{}{})
	fake.owningGroupIDMutex.Unlock()
	if fake.OwningGroupIDStub != nil {
		return fake.OwningGroupIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.owningGroupIDReturns
	return fakeReturns.result1
}

func (fake *FakeResource) OwningGroupIDCallCount() int {
	fake.owningGroupIDMutex.RLock()
	defer fake.owningGroupIDMutex.RUnlock()
	return len(fake.owningGroupIDArgsForCall)
}

func (fake *FakeResource) OwningGroupIDCalls(stub func() permissions.GroupID) {
	fake.owningGroupIDMutex.Lock()
	defer fake.owningGroupIDMutex.Unlock()
	fake.OwningGroupIDStub = stub
}

func (fake *FakeResource) OwningGroupIDReturns(result1 permissions.GroupID) {
	fake.owningGroupIDMutex.Lock()
	defer fake.owningGroupIDMutex.Unlock()
	fake.OwningGroupIDStub = nil
	fake.owningGroupIDReturns = struct {
		result1 permissions.GroupID
	}{result1}
}

func (fake *FakeResource) OwningGroupIDReturnsOnCall(i int, result1 permissions.GroupID) {
	fake.owningGroupIDMutex.Lock()
	defer fake.owningGroupIDMutex.Unlock()
	fake.OwningGroupIDStub = nil
	if fake.owningGroupIDReturnsOnCall == nil {
		fake.owningGroupIDReturnsOnCall = make(map[int]struct {
			result1 permissions.GroupID
		})
	}
	fake.owningGroupIDReturnsOnCall[i] = struct {
		result1 permissions.GroupID
	}{result1}
}

func (fake *FakeResource) OwningUserID() permissions.UserID {
	fake.owningUserIDMutex.Lock()
	ret, specificReturn := fake.owningUserIDReturnsOnCall[len(fake.owningUserIDArgsForCall)]
	fake.owningUserIDArgsForCall = append(fake.owningUserIDArgsForCall, struct {
	}{})
	fake.recordInvocation("OwningUserID", []interface{}{})
	fake.owningUserIDMutex.Unlock()
	if fake.OwningUserIDStub != nil {
		return fake.OwningUserIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.owningUserIDReturns
	return fakeReturns.result1
}

func (fake *FakeResource) OwningUserIDCallCount() int {
	fake.owningUserIDMutex.RLock()
	defer fake.owningUserIDMutex.RUnlock()
	return len(fake.owningUserIDArgsForCall)
}

func (fake *FakeResource) OwningUserIDCalls(stub func() permissions.UserID) {
	fake.owningUserIDMutex.Lock()
	defer fake.owningUserIDMutex.Unlock()
	fake.OwningUserIDStub = stub
}

func (fake *FakeResource) OwningUserIDReturns(result1 permissions.UserID) {
	fake.owningUserIDMutex.Lock()
	defer fake.owningUserIDMutex.Unlock()
	fake.OwningUserIDStub = nil
	fake.owningUserIDReturns = struct {
		result1 permissions.UserID
	}{result1}
}

func (fake *FakeResource) OwningUserIDReturnsOnCall(i int, result1 permissions.UserID) {
	fake.owningUserIDMutex.Lock()
	defer fake.owningUserIDMutex.Unlock()
	fake.OwningUserIDStub = nil
	if fake.owningUserIDReturnsOnCall == nil {
		fake.owningUserIDReturnsOnCall = make(map[int]struct {
			result1 permissions.UserID
		})
	}
	fake.owningUserIDReturnsOnCall[i] = struct {
		result1 permissions.UserID
	}{result1}
}

func (fake *FakeResource) Permissions() *permissions.Permissions {
	fake.permissionsMutex.Lock()
	ret, specificReturn := fake.permissionsReturnsOnCall[len(fake.permissionsArgsForCall)]
	fake.permissionsArgsForCall = append(fake.permissionsArgsForCall, struct {
	}{})
	fake.recordInvocation("Permissions", []interface{}{})
	fake.permissionsMutex.Unlock()
	if fake.PermissionsStub != nil {
		return fake.PermissionsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.permissionsReturns
	return fakeReturns.result1
}

func (fake *FakeResource) PermissionsCallCount() int {
	fake.permissionsMutex.RLock()
	defer fake.permissionsMutex.RUnlock()
	return len(fake.permissionsArgsForCall)
}

func (fake *FakeResource) PermissionsCalls(stub func() *permissions.Permissions) {
	fake.permissionsMutex.Lock()
	defer fake.permissionsMutex.Unlock()
	fake.PermissionsStub = stub
}

func (fake *FakeResource) PermissionsReturns(result1 *permissions.Permissions) {
	fake.permissionsMutex.Lock()
	defer fake.permissionsMutex.Unlock()
	fake.PermissionsStub = nil
	fake.permissionsReturns = struct {
		result1 *permissions.Permissions
	}{result1}
}

func (fake *FakeResource) PermissionsReturnsOnCall(i int, result1 *permissions.Permissions) {
	fake.permissionsMutex.Lock()
	defer fake.permissionsMutex.Unlock()
	fake.PermissionsStub = nil
	if fake.permissionsReturnsOnCall == nil {
		fake.permissionsReturnsOnCall = make(map[int]struct {
			result1 *permissions.Permissions
		})
	}
	fake.permissionsReturnsOnCall[i] = struct {
		result1 *permissions.Permissions
	}{result1}
}

func (fake *FakeResource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.owningGroupIDMutex.RLock()
	defer fake.owningGroupIDMutex.RUnlock()
	fake.owningUserIDMutex.RLock()
	defer fake.owningUserIDMutex.RUnlock()
	fake.permissionsMutex.RLock()
	defer fake.permissionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ permissions.Resource = new(FakeResource)
